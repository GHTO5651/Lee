<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>게시판 & 미니게임</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body class="bg-light">

  <nav class="navbar navbar-dark bg-primary">
    <div class="container d-flex justify-content-between align-items-center">
      <div>
        <a class="navbar-brand" href="#">📝 게시판</a>
        <a href="https://iogames.space/diep-io" target="_blank" class="text-light text-decoration-underline ms-3">🎮 미니게임</a>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2>전체 글 목록</h2>
      <button id="writeBtn" class="btn btn-success">글쓰기</button>
    </div>

    <!-- 글쓰기 폼 -->
    <div id="writeForm" class="card shadow-sm mb-4" style="display: none;">
      <div class="card-header">
        <h4>글쓰기</h4>
      </div>
      <div class="card-body">
        <form id="form">
          <div class="mb-3">
            <label class="form-label">제목</label>
            <input name="title" class="form-control" required />
          </div>
          <div class="mb-3">
            <label class="form-label">내용</label>
            <textarea name="content" class="form-control" rows="5" required></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">글자 크기</label>
            <select name="size" class="form-select">
              <option value="16px">보통</option>
              <option value="20px">크게</option>
              <option value="24px">더 크게</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">글자 색상</label>
            <input type="color" name="color" value="#000000" class="form-control form-control-color" />
          </div>
          <div class="text-end">
            <button type="submit" class="btn btn-primary">저장</button>
            <button type="button" id="cancelBtn" class="btn btn-secondary">취소</button>
          </div>
        </form>
      </div>
    </div>

        <!-- 고정 게시글 -->
    <div id="fixed-post" style="border: 2px solid red; padding: 15px; margin-bottom: 20px; background-color:#fff8f8;">
      <h2 class="text-center" style="color: red; margin-bottom: 10px;">비트코딩 게시판 이용안내</h2>
      <ol style="color: black; padding-left: 20px;">
        <li>다른 사람을 비난하는 게시글 작성X</li>
        <li>종교나 정치적 발언X</li>
        <li>깨끗한 게시판을 만들어 갑시다.</li>
      </ol>
      <p style="color: gray; font-size: 10px; margin-top: 10px;">
        ※ 이 공지는 절대 삭제, 수정 불가하며 운영진만 편집 가능합니다.
      </p>
    </div>

            <!-- 글 목록 -->
    <div id="postList" class="list-group mb-4"></div>

    <!-- 글 상세 보기 -->
    <div id="postDetail" class="card shadow-sm mb-4" style="display: none;">
      <div class="card-body">
        <h3 id="detailTitle"></h3>
        <p id="detailContent" style="white-space: pre-wrap;"></p>
      </div>
    </div>
  </div>

  <script>
    const postList = document.getElementById('postList');
    const postDetail = document.getElementById('postDetail');
    const writeForm = document.getElementById('writeForm');
    const writeBtn = document.getElementById('writeBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const form = document.getElementById('form');
    const textarea = form.querySelector('textarea');

    const detailTitle = document.getElementById('detailTitle');
    const detailContent = document.getElementById('detailContent');
     const container = document.querySelector('.container');

    // 글 목록 가져오기
    let currentOpenId = null;

    async function loadPosts() {
      const res = await fetch('/api/posts');
      const posts = await res.json();
      postList.innerHTML = '';

      posts.forEach(post => {
        const div = document.createElement('div');
        div.className = 'd-flex justify-content-between align-items-center mb-1';

        const btn = document.createElement('button');
        btn.className = 'list-group-item list-group-item-action flex-grow-1 me-2';
        btn.textContent = post.title;

        const detailDiv = document.createElement('div'); // 상세 보기 div
        detailDiv.className = 'border rounded p-3 mt-2';
        detailDiv.style.display = 'none';

        btn.onclick = async () => {
          if (currentOpenId === post._id) {
            detailDiv.style.display = 'none';
            currentOpenId = null;
          } else {
            const res = await fetch('/api/posts/' + post._id);
            const data = await res.json();
            detailDiv.innerHTML = `
              <h5 style="font-size:${data.size}; color:${data.color}">${data.title}</h5>
              <p style="font-size:${data.size}; color:${data.color}; white-space: pre-wrap;">${data.content}</p>
            `;
            document.querySelectorAll('.post-detail').forEach(el => el.style.display = 'none');
            detailDiv.style.display = 'block';
            currentOpenId = post._id;
          }
        };

        detailDiv.classList.add('post-detail');

        const delBtn = document.createElement('button');
        delBtn.className = 'btn btn-sm btn-danger';
        delBtn.textContent = '삭제';
        delBtn.onclick = async (e) => {
          e.stopPropagation();
          if (confirm('정말 삭제할까요?')) {
            const res = await fetch('/api/posts/' + post._id, { method: 'DELETE' });
            if (res.ok) {
              alert('삭제 성공');
              currentOpenId = null;
              loadPosts();
            } else {
              alert('삭제 실패');
            }
          }
        };

        div.appendChild(btn);
        div.appendChild(delBtn);
        postList.appendChild(div);
        postList.appendChild(detailDiv); // 버튼 아래에 detail 삽입
      });
    }

    // 글 상세 보기
    async function showPost(id) {
      const res = await fetch('/api/posts/' + id);
      const post = await res.json();

      detailTitle.textContent = post.title;
      detailContent.textContent = post.content;
      detailContent.style.fontSize = post.size || '16px';
      detailContent.style.color = post.color || '#000';

      postDetail.style.display = 'block';
      writeForm.style.display = 'none';
    }

    // 글쓰기 폼 열기
    writeBtn.onclick = () => {
      writeForm.style.display = 'block';
      postDetail.style.display = 'none';
      // container.insertBefore(writeForm, postList);
    };

    // 글쓰기 취소
    cancelBtn.onclick = () => {
      writeForm.style.display = 'none';
      postDetail.style.display = 'none';
    };

    // 글 저장
    form.onsubmit = async e => {
      e.preventDefault();
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());

      const res = await fetch('/api/posts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      if (res.ok) {
        alert('저장 성공!');
        form.reset();
        writeForm.style.display = 'none';
        loadPosts();
      } else {
        alert('저장 실패');
      }
    };

    // textarea.addEventListener.getElementById('from');
    //   if (e.key === 'Enter' && e.shfitkey)

    // 처음에 글 목록 불러오기
    loadPosts();
  </script>
</body>
</html>
